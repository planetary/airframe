/**
*    _            _           _                           _ _       
*   (_)          | |         | |                         | (_)      
*    _ _ __   ___| |_   _  __| | ___   _ __ ___   ___  __| |_  __ _ 
*   | | '_ \ / __| | | | |/ _` |/ _ \ | '_ ` _ \ / _ \/ _` | |/ _` |
*   | | | | | (__| | |_| | (_| |  __/ | | | | | |  __/ (_| | | (_| |
*   |_|_| |_|\___|_|\__,_|\__,_|\___| |_| |_| |_|\___|\__,_|_|\__,_|
*   
*           https://github.com/eduardoboucas/include-media  
*   
* 
*     A SASS mixin to write simple and powerful media queries
*
*            Eduardo Boucas <mail@eduardoboucas.com>
*
**/
$breakpoints: (phone: 320px, tablet: 768px, desktop: 1024px) !default;
$media-expressions: (screen: "screen", 
                    print: "print", 
                    handheld: "handheld",
                    retina2x: ("(-webkit-min-device-pixel-ratio: 2)", "(min-resolution: 192dpi)"), 
                    retina3x: ("(-webkit-min-device-pixel-ratio: 3)", "(min-resolution: 350dpi)")
                    ) !default;
@mixin media($conditions...) {
  $i: 1;
  
  @each $condition in $conditions {
    $conditions: set-nth($conditions, $i, parse-expression(nth($conditions, $i)));
    $i: $i + 1;
  }
  
  $branches: get-query-branches($conditions);
  $query: "";
  
  @each $branch in $branches {
    @if ($query != "") {
      $query: $query + ", ";
    }
    
    $query: $query + $branch;
  }
  
  @media #{$query} { @content; }
}
@function get-query-branches($expressions) {
  $result: "";
  $has-groups: false;
  
  // Getting initial snapshot and looking for groups
  @each $expression in $expressions {
    @if ($result != "") {
      $result: $result + " and ";
    }
    
    @if (type-of($expression) == "string") {
      $result: $result + $expression;
    } @else if (type-of($expression) == "list") {
      $result: $result + nth($expression, 1);
      $has-groups: true;
    }
  }  
  
  // If we have groups, we have to create all possible combinations
  @if $has-groups {
    @each $expression in $expressions {
      @if (type-of($expression) == "list") {
        $first: nth($expression, 1);
        
        @each $member in $expression {
          @if ($member != $first) {
            @each $partial in $result {
              $result: join($result, str-replace-first($first, $member, $partial));
            }
          }
        }
      }
    }    
  }
  
  @return $result;
}
@function parse-expression($expression) {
  $operator: "";
  $value: "";
  $element: "";
  $result: "";
  $is-width: true;  
  
  // Separating the operator from the rest of the expression
  @if (str-slice($expression, 2, 2) == "=") {
    $operator: str-slice($expression, 1, 2);
    $value: str-slice($expression, 3);
  } @else {
    $operator: str-slice($expression, 1, 1);
    $value: str-slice($expression, 2);
  }
  
  // Checking what type of expression we're dealing with
  @if map-has-key($breakpoints, $value) {
    $result: map-get($breakpoints, $value);
  } @else if map-has-key($media-expressions, $expression) {
    $result: map-get($media-expressions, $expression);
    $is-width: false;
  } @else {
    $result: to-number($value);
  }
  
  @if ($is-width) {
    @if ($operator == ">") {
      $element: "(min-width: #{$result + 1})";
    } @else if ($operator == "<") {
      $element: "(max-width: #{$result - 1})";
    } @else if ($operator == ">=") {
      $element: "(min-width: #{$result})";
    } @else if ($operator == "<=") {
      $element: "(max-width: #{$result})";
    }
  } @else {
    $element: $result;
  }
  
  @return $element;
}
@function str-replace-first($search, $replace, $subject) {
  $search-start: str-index($subject, $search);
  
  @if not $search-start {
    @return $subject;
  }
  
  $result: str-slice($subject, 0, $search-start - 1);
  $result: $result + $replace;
  $result: $result + str-slice($subject, $search-start + str-length($search));
  
  @return $result;
}
/**
*
* Function to cast strings into numbers in SASS
*
* Author: Hugo Giraudel (@hugogiraudel)
* https://github.com/HugoGiraudel/SassyCast
*
**/

@function _length($number, $unit) {
  $strings: 'px' 'cm' 'mm' '%' 'ch' 'pica' 'in' 'em' 'rem' 'pt' 'pc' 'ex' 'vw' 'vh' 'vmin' 'vmax';
  $units:   1px  1cm  1mm  1%  1ch  1pica  1in  1em  1rem  1pt  1pc  1ex  1vw  1vh  1vmin  1vmax;
  $index: index($strings, $unit);
  
  @if not $index {
    @warn "Unknown unit `#{$unit}`.";
    @return false;
  }
  
  @return $number * nth($units, $index);
}

@function to-number($string) {
  // Matrices
  $strings: '0' '1' '2' '3' '4' '5' '6' '7' '8' '9';
  $numbers:  0   1   2   3   4   5   6   7   8   9;
  
  // Result
  $result: 0;
  $divider: 0;
  $minus: false;

  // Looping through all characters
  @for $i from 1 through str-length($string) {
    $character: str-slice($string, $i, $i);
    $index: index($strings, $character);
    
  
    @if $character == '-' {
      $minus: true;
    }
    
    @else if $character == '.' {
      $divider: 1;
    }
    
    @else {
      @if not $index {
        $result: if($minus, $result * -1, $result);
        @return _length($result, str-slice($string, $i));
      }

      $number: nth($numbers, $index);
      
      @if $divider == 0 {
        $result: $result * 10;
      }
      
      @else {
        // Move the decimal dot to the left
        $divider: $divider * 10;
        $number: $number / $divider;
      }
      
      $result: $result + $number;
    }
  }
  
  @return if($minus, $result * -1, $result);
}